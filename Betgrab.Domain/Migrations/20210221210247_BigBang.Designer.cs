// <auto-generated />
using System;
using Betgrab.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Betgrab.Domain.Migrations
{
    [DbContext(typeof(BetgrabContext))]
    [Migration("20210221210247_BigBang")]
    partial class BigBang
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Betgrab.Domain.Entities.Club", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("LivescoreId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(2000)");

                    b.Property<int?>("NationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LivescoreId")
                        .IsUnique();

                    b.HasIndex("NationId");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("Betgrab.Domain.Entities.ClubLeague", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("ClubId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LeagueId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("LeagueId");

                    b.ToTable("ClubLeague");
                });

            modelBuilder.Entity("Betgrab.Domain.Entities.ClubMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("ClubId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsLeasing")
                        .HasColumnType("boolean");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("PlayerId");

                    b.ToTable("ClubMember");
                });

            modelBuilder.Entity("Betgrab.Domain.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("Club1Id")
                        .HasColumnType("integer");

                    b.Property<int?>("Club2Id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("boolean");

                    b.Property<string>("LivescoreId")
                        .HasColumnType("text");

                    b.Property<int?>("StageId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte?>("Tr1")
                        .HasColumnType("smallint");

                    b.Property<byte?>("Tr1OR")
                        .HasColumnType("smallint");

                    b.Property<byte?>("Tr2")
                        .HasColumnType("smallint");

                    b.Property<byte?>("Tr2OR")
                        .HasColumnType("smallint");

                    b.Property<byte?>("Trh1")
                        .HasColumnType("smallint");

                    b.Property<byte?>("Trh2")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("Club1Id");

                    b.HasIndex("Club2Id");

                    b.HasIndex("LivescoreId")
                        .IsUnique();

                    b.HasIndex("StageId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Betgrab.Domain.Entities.EventStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("ClubId")
                        .HasColumnType("integer");

                    b.Property<int>("CornerKicks")
                        .HasColumnType("integer");

                    b.Property<int>("CounterAttacks")
                        .HasColumnType("integer");

                    b.Property<int>("Crosses")
                        .HasColumnType("integer");

                    b.Property<int?>("EventId")
                        .HasColumnType("integer");

                    b.Property<int>("Fouls")
                        .HasColumnType("integer");

                    b.Property<int>("GoalKicks")
                        .HasColumnType("integer");

                    b.Property<int>("GoalkeeperSaves")
                        .HasColumnType("integer");

                    b.Property<int>("Offsides")
                        .HasColumnType("integer");

                    b.Property<int>("Possession")
                        .HasColumnType("integer");

                    b.Property<int>("RedCards")
                        .HasColumnType("integer");

                    b.Property<int>("ShotsBlocked")
                        .HasColumnType("integer");

                    b.Property<int>("ShotsOffTarget")
                        .HasColumnType("integer");

                    b.Property<int>("ShotsOnTarget")
                        .HasColumnType("integer");

                    b.Property<int>("ThrowIns")
                        .HasColumnType("integer");

                    b.Property<int>("Treatments")
                        .HasColumnType("integer");

                    b.Property<int>("YellowCards")
                        .HasColumnType("integer");

                    b.Property<int>("YellowRedCards")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("EventId");

                    b.ToTable("EventStats");
                });

            modelBuilder.Entity("Betgrab.Domain.Entities.Fact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("EventId")
                        .HasColumnType("integer");

                    b.Property<string>("LivescoreId")
                        .HasColumnType("text");

                    b.Property<byte>("Min")
                        .HasColumnType("smallint");

                    b.Property<byte?>("MinEx")
                        .HasColumnType("smallint");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("LivescoreId")
                        .IsUnique();

                    b.HasIndex("PlayerId");

                    b.ToTable("Facts");
                });

            modelBuilder.Entity("Betgrab.Domain.Entities.League", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("IsInternational")
                        .HasColumnType("boolean");

                    b.Property<string>("LivescoreId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("NationId")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LivescoreId")
                        .IsUnique();

                    b.HasIndex("NationId");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("Betgrab.Domain.Entities.Nation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("LivescoreId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LivescoreId")
                        .IsUnique();

                    b.ToTable("Nations");
                });

            modelBuilder.Entity("Betgrab.Domain.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("LivescoreId")
                        .HasColumnType("text");

                    b.Property<int?>("PlayerNumber")
                        .HasColumnType("integer");

                    b.Property<string>("PositionName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LivescoreId")
                        .IsUnique();

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Betgrab.Domain.Entities.Stage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("LeagueId")
                        .HasColumnType("integer");

                    b.Property<string>("LivescoreId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.HasIndex("LivescoreId")
                        .IsUnique();

                    b.ToTable("Stages");
                });

            modelBuilder.Entity("NationPlayer", b =>
                {
                    b.Property<int>("CitizensId")
                        .HasColumnType("integer");

                    b.Property<int>("NationalityId")
                        .HasColumnType("integer");

                    b.HasKey("CitizensId", "NationalityId");

                    b.HasIndex("NationalityId");

                    b.ToTable("NationPlayer");
                });

            modelBuilder.Entity("Betgrab.Domain.Entities.Club", b =>
                {
                    b.HasOne("Betgrab.Domain.Entities.Nation", "Nation")
                        .WithMany("Clubs")
                        .HasForeignKey("NationId");

                    b.Navigation("Nation");
                });

            modelBuilder.Entity("Betgrab.Domain.Entities.ClubLeague", b =>
                {
                    b.HasOne("Betgrab.Domain.Entities.Club", "Club")
                        .WithMany("Leagues")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Betgrab.Domain.Entities.League", "League")
                        .WithMany("Clubs")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");

                    b.Navigation("League");
                });

            modelBuilder.Entity("Betgrab.Domain.Entities.ClubMember", b =>
                {
                    b.HasOne("Betgrab.Domain.Entities.Club", "Club")
                        .WithMany("Members")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Betgrab.Domain.Entities.Player", "Player")
                        .WithMany("ClubParticipation")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Betgrab.Domain.Entities.Event", b =>
                {
                    b.HasOne("Betgrab.Domain.Entities.Club", "Club1")
                        .WithMany()
                        .HasForeignKey("Club1Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Betgrab.Domain.Entities.Club", "Club2")
                        .WithMany()
                        .HasForeignKey("Club2Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Betgrab.Domain.Entities.Stage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId");

                    b.Navigation("Club1");

                    b.Navigation("Club2");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("Betgrab.Domain.Entities.EventStats", b =>
                {
                    b.HasOne("Betgrab.Domain.Entities.Club", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId");

                    b.HasOne("Betgrab.Domain.Entities.Event", "Event")
                        .WithMany("Stats")
                        .HasForeignKey("EventId");

                    b.Navigation("Club");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Betgrab.Domain.Entities.Fact", b =>
                {
                    b.HasOne("Betgrab.Domain.Entities.Event", "Event")
                        .WithMany("Facts")
                        .HasForeignKey("EventId");

                    b.HasOne("Betgrab.Domain.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");

                    b.Navigation("Event");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Betgrab.Domain.Entities.League", b =>
                {
                    b.HasOne("Betgrab.Domain.Entities.Nation", "Nation")
                        .WithMany()
                        .HasForeignKey("NationId");

                    b.Navigation("Nation");
                });

            modelBuilder.Entity("Betgrab.Domain.Entities.Stage", b =>
                {
                    b.HasOne("Betgrab.Domain.Entities.League", "League")
                        .WithMany("Competitions")
                        .HasForeignKey("LeagueId");

                    b.Navigation("League");
                });

            modelBuilder.Entity("NationPlayer", b =>
                {
                    b.HasOne("Betgrab.Domain.Entities.Player", null)
                        .WithMany()
                        .HasForeignKey("CitizensId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Betgrab.Domain.Entities.Nation", null)
                        .WithMany()
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Betgrab.Domain.Entities.Club", b =>
                {
                    b.Navigation("Leagues");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("Betgrab.Domain.Entities.Event", b =>
                {
                    b.Navigation("Facts");

                    b.Navigation("Stats");
                });

            modelBuilder.Entity("Betgrab.Domain.Entities.League", b =>
                {
                    b.Navigation("Clubs");

                    b.Navigation("Competitions");
                });

            modelBuilder.Entity("Betgrab.Domain.Entities.Nation", b =>
                {
                    b.Navigation("Clubs");
                });

            modelBuilder.Entity("Betgrab.Domain.Entities.Player", b =>
                {
                    b.Navigation("ClubParticipation");
                });
#pragma warning restore 612, 618
        }
    }
}
